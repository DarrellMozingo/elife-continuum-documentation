#  Contiuum wide settings.
#
# These will be read in to set and coordinate yaml files and settings files
# across come continuum components.gs
#
# Where possible These will also be used to create AWS resources with the appropriate IDs
# and permissions

# need path to builder to be able to access ~/builder/projects/elife.yaml
builder_path: /local/path/to/builder

# need path the builder_private repo to be able to access location of expected
# component configuration files, specifically:
#
## salt files - contains configuration that ought to be fine, but actully does contain
# some configuration data taht MUST NOT be made public.
#
# ~/builder-private/salt/elife-bot/config/opt-elife-bot-settings.py - config for elife bot
# ~/builder-private/salt/elife-dahboard-config/srv-app-dashboard-master_settings.py - config for dahsboard
# ~/builder-private/salt/elife-dahboard-config/srv-elife-article-scheduler-src-core-master_settings.py - config for scheduler
#
## pillar files - contains secrets, like DB passwords, that MUST NOT be made public
#
# ~/builder-private/pillar/elife.sls - generic settings, like HTTP AUTH
#
builder_private_path: /local/path/t0/builder-private
builder_private_repo: githubusername/builder-private

aws_region:
  region: eu-central-1

domain_name:
  domain: yourdomain.com

http_auth:
  # the basic user password are used to secure access to the production dashboard
  user: production
  password: long_password_for_accessing_dashboard
  # crazy user password is
  # set in pillar/elife.sls complex, long complex
  # is also used as lax updated user and lax update password
  crazy_user: crazy_user_example
  crazy_password: crazy_password_example
  web_user: elife # set in pillar/elife.sls - "open" secret to block robots
  web_password: sciences

lax_application:
  app_secret: longhardtoguesssecretforyourapp
  db_username: nameshouldbelowercase
  db_password: longhardtoguesssecretforyourdb

application_emails:
  SES_email: your@email.com
  deploy_user_email: your@email.com

drupal_site_details:
  # these target /builer-private/salt/elife-bot/config/opt-elife-bot-settings.py
  hostname: http://test-instance.com
  update_user: drupal
  update_pass: longhardtoguessdurpalpassword
  # these target builder-private/pillar/elife_website.sls
  drupal_website_username: website
  drupal_db_username: drupal
  drupal_user_username: elife Builder
  drupal_db_password: longhardtoguesssecretforyourdb
  drupal_db_test_password: anotherlonghardtoguesssecretforyourdb
  drupal_user_password: yetanotherlonghardtoguesssecretforyourdb

## Elife bot specific AWS settings
prefix: your-prefix

elife_dashboard_other:
  db_username: db_username
  db_password: longpassword

elife_scheduler_other:
  db_username: db_username
  db_password: longpassword
  app_key: alonghardtoguessapplicationkey

elife_bot_user_aws: # also used as aws keys for the the dashboard
  aws_username: bot_aws_deploy_username
  key: thesupersecretawskey
  secret: thesupersecretawssecret

# S3 info derived from bot settings,
# https://github.com/elifesciences/builder/blob/master/salt/salt/elife-bot/config/opt-elife-bot-settings.py#L25-L27
# for the settings script to work the keys in this config need to be the same
# as the keys in the settings file that we are targeting.
s3_buckets:
  production_bucket : production-final
  eif_bucket : publishing-eif
  expanded_bucket : publishing-expanded
  ppp_cdn_bucket : publishing-cdn
  archive_bucket : publishing-archive
  xml_bucket : publishing-xml
  lens_bucket: elife-lens

swf_domain:
  # TODO: check name coordinatino with class name in opt-elife-bot-settings
  domain: dev # possibly needs to be coordinated with class name in opt-elife-bot-settings



# # queue info derioved from dashboard settings, and bot settings,
# # e.g. https://github.com/elifesciences/builder/blob/master/salt/salt/elife-dashboard/config/srv-app-dashboard-prod_settings.py#L9-L11
# # https://github.com/elifesciences/builder/blob/master/salt/salt/elife-bot/config/opt-elife-bot-settings.py#L25-L27
#
# for the settings script to work the keys in this config need to be the same
# as the keys in the settings file that we are targeting.
sqs_queues:
  S3_monitor_queue: incoming-queue
  event_monitor_queue: event-property-incoming-queue
  workflow_starter_queue: workflow-starter-queue
  website_ingest_queue: website-ingest-queue

## Deletion protection settings
protected_prefixes:
  end2ned
  ct
  elife

s3_protected_buckets:
  # these specific bucket instances are checked to ensure they are not
  # delted by the delte scripts
  production-final
  publishing-cdn
  publishing-eif
  elife-ejp-poa-delivery
  eif-reference
  publishing-expanded
  publishing-archive
  bot-test-elife-production-final
  bot-test-elife-publishing-cdn
  bot-test-elife-publishing-eif
  bot-test-elife-eif-reference
  bot-test-elife-publishing-expanded
  bot-test-elife-publishing-archive
  elife-poa-packaging-end2end
  end2end-elife-articles
  end2end-elife-bot
  end2end-elife-cdn
  end2end-elife-ejp-ftp
  end2end-elife-lens
  end2end-elife-poa-packaging-end2end
  end2end-elife-production-final
  end2end-elife-production-lens-jpg
  end2end-elife-publishing-archive
  end2end-elife-publishing-cdn.
  end2end-elife-publishing-eif
  end2end-elife-publishing-expanded
  end2end-elife-publishing-xml
  end2end-eliife-ejp-poa-delivery

sqs_protected_queues:
  # these specific sqs queues are checked to ensure they are not
  # delted by the delte scripts
  ct-event-property-incoming-queue
  ct-incoming-queue
  ct-website-ingest-queue
  ct-workflow-starter-queue
  end2end-event-property-incoming-queue
  end2end-incoming-queue
  end2end-website-ingest-queue
  end2end-workflow-starter-queue
  event-property-incoming-queue
  exp-event-property-incoming-queue
  exp-incoming-queue
  exp-workflow-starter-queue
  incoming-queue
  nlisgo-incoming-queue
  parallel-event-property-incoming-queue
  parallel-incoming-queue
  parallel-workflow-starter-queue
  ppp-test-queue-im
  website-ingest-queue
  workflow-starter-queue
